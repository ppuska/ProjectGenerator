"""Main module of the package"""

import argparse
import logging
import os.path
import sys

from . import __version__

WORKING_DIR = "work_dir"
PACKAGE_NAME = "package_name"
ENABLE_GIT = "enable_git"


def parse_args(args):
    """This function parses the command line arguments"""
    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv.pop(0)),
        description="This package creates boilerplate code templates for python projects",
    )

    # version
    parser.add_argument("--version", action="version", version=f"Python Project Generator: {__version__}")

    # workdir
    parser.add_argument(type=str, dest=WORKING_DIR, help="The directory to install the code into")

    # project name
    parser.add_argument(
        "-n", "--name", type=str, required=True, dest=PACKAGE_NAME, help="The name of the python package"
    )

    # git
    parser.add_argument(
        "--git", dest=ENABLE_GIT, action="store_true", help="Use this flag to enable version control using git"
    )

    return parser.parse_args(args)


def create_file_structure(path: str, package_name: str) -> str:
    """Creates the file structure of the project"""
    cwd = os.path.join(path, "src")  # current working directory

    try:
        os.mkdir(cwd)

    except FileExistsError:
        logging.error("Cannot create directory, a file already exists with the same name (%s)", package_name)
        return ""

    package_dir = create_package(cwd, package_name)
    return package_dir


def create_package(path: str, package_name: str) -> str:
    """Creates a python package with the given name"""
    logging.info("Creating package...")
    dir_path = os.path.join(path, package_name)

    try:
        os.mkdir(dir_path)

        #  init module
        with open(os.path.join(dir_path, "__init__.py"), "x") as _:
            pass

        # package main module
        with open(os.path.join(dir_path, f"{package_name}.py"), "x") as file:
            file.write("# This file was generated by the Python Project Generator")

    except FileExistsError:
        logging.error("Cannot create directory, a file already exists with the same name (%s)", package_name)
        return ""

    return dir_path


def enable_git(path: str) -> bool:
    """Enables git integration in the given path"""
    logging.info("Initializing git...")
    return_code = os.system(f"cd {path} && git init > nul")

    return True if return_code == 0 else False


def main():
    """Main entry point of the script"""

    exec_path = sys.argv[0]  # retrieve the first element (program path)
    exec_path, _ = os.path.split(exec_path)  # strip the program name

    opts = vars(parse_args(sys.argv))

    work_dir = opts.get(WORKING_DIR)
    work_dir = os.path.abspath(work_dir)  # create absolute work path

    if not os.path.isdir(work_dir):  # check if the work path is valid
        logging.error("%s is not a valid directory, exiting", work_dir)
        exit(1)

    package_name = opts.get(PACKAGE_NAME)

    package_dir = create_file_structure(work_dir, package_name)

    git_enabled = opts.get(ENABLE_GIT)

    if git_enabled:
        enable_git(package_dir)

    return 0


if __name__ == "__main__":
    main()
